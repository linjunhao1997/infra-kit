// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"infra-kit/apps/iam/ent/org"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Org is the model entity for the Org schema.
type Org struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Ctime holds the value of the "ctime" field.
	Ctime time.Time `json:"ctime,omitempty"`
	// Mtime holds the value of the "mtime" field.
	Mtime time.Time `json:"mtime,omitempty"`
	// Deleted holds the value of the "deleted" field.
	Deleted bool `json:"deleted,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrgQuery when eager-loading is set.
	Edges        OrgEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OrgEdges holds the relations/edges for other nodes in the graph.
type OrgEdges struct {
	// Groups holds the value of the groups edge.
	Groups []*Group `json:"groups,omitempty"`
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// Namespaces holds the value of the namespaces edge.
	Namespaces []*Namespace `json:"namespaces,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// GroupsOrErr returns the Groups value or an error if the edge
// was not loaded in eager-loading.
func (e OrgEdges) GroupsOrErr() ([]*Group, error) {
	if e.loadedTypes[0] {
		return e.Groups, nil
	}
	return nil, &NotLoadedError{edge: "groups"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e OrgEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// NamespacesOrErr returns the Namespaces value or an error if the edge
// was not loaded in eager-loading.
func (e OrgEdges) NamespacesOrErr() ([]*Namespace, error) {
	if e.loadedTypes[2] {
		return e.Namespaces, nil
	}
	return nil, &NotLoadedError{edge: "namespaces"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Org) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case org.FieldDeleted:
			values[i] = new(sql.NullBool)
		case org.FieldID, org.FieldCode, org.FieldName:
			values[i] = new(sql.NullString)
		case org.FieldCtime, org.FieldMtime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Org fields.
func (o *Org) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case org.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				o.ID = value.String
			}
		case org.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				o.Code = value.String
			}
		case org.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				o.Name = value.String
			}
		case org.FieldCtime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ctime", values[i])
			} else if value.Valid {
				o.Ctime = value.Time
			}
		case org.FieldMtime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field mtime", values[i])
			} else if value.Valid {
				o.Mtime = value.Time
			}
		case org.FieldDeleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				o.Deleted = value.Bool
			}
		default:
			o.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Org.
// This includes values selected through modifiers, order, etc.
func (o *Org) Value(name string) (ent.Value, error) {
	return o.selectValues.Get(name)
}

// QueryGroups queries the "groups" edge of the Org entity.
func (o *Org) QueryGroups() *GroupQuery {
	return NewOrgClient(o.config).QueryGroups(o)
}

// QueryUsers queries the "users" edge of the Org entity.
func (o *Org) QueryUsers() *UserQuery {
	return NewOrgClient(o.config).QueryUsers(o)
}

// QueryNamespaces queries the "namespaces" edge of the Org entity.
func (o *Org) QueryNamespaces() *NamespaceQuery {
	return NewOrgClient(o.config).QueryNamespaces(o)
}

// Update returns a builder for updating this Org.
// Note that you need to call Org.Unwrap() before calling this method if this Org
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Org) Update() *OrgUpdateOne {
	return NewOrgClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Org entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Org) Unwrap() *Org {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Org is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Org) String() string {
	var builder strings.Builder
	builder.WriteString("Org(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("code=")
	builder.WriteString(o.Code)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(o.Name)
	builder.WriteString(", ")
	builder.WriteString("ctime=")
	builder.WriteString(o.Ctime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("mtime=")
	builder.WriteString(o.Mtime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", o.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// Orgs is a parsable slice of Org.
type Orgs []*Org
