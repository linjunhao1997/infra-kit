// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"infra-kit/apps/iam/ent/group"
	"infra-kit/apps/iam/ent/namespace"
	"infra-kit/apps/iam/ent/org"
	"infra-kit/apps/iam/ent/user"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrgCreate is the builder for creating a Org entity.
type OrgCreate struct {
	config
	mutation *OrgMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCode sets the "code" field.
func (oc *OrgCreate) SetCode(s string) *OrgCreate {
	oc.mutation.SetCode(s)
	return oc
}

// SetName sets the "name" field.
func (oc *OrgCreate) SetName(s string) *OrgCreate {
	oc.mutation.SetName(s)
	return oc
}

// SetCtime sets the "ctime" field.
func (oc *OrgCreate) SetCtime(t time.Time) *OrgCreate {
	oc.mutation.SetCtime(t)
	return oc
}

// SetMtime sets the "mtime" field.
func (oc *OrgCreate) SetMtime(t time.Time) *OrgCreate {
	oc.mutation.SetMtime(t)
	return oc
}

// SetDeleted sets the "deleted" field.
func (oc *OrgCreate) SetDeleted(b bool) *OrgCreate {
	oc.mutation.SetDeleted(b)
	return oc
}

// SetID sets the "id" field.
func (oc *OrgCreate) SetID(s string) *OrgCreate {
	oc.mutation.SetID(s)
	return oc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (oc *OrgCreate) SetNillableID(s *string) *OrgCreate {
	if s != nil {
		oc.SetID(*s)
	}
	return oc
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (oc *OrgCreate) AddGroupIDs(ids ...string) *OrgCreate {
	oc.mutation.AddGroupIDs(ids...)
	return oc
}

// AddGroups adds the "groups" edges to the Group entity.
func (oc *OrgCreate) AddGroups(g ...*Group) *OrgCreate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return oc.AddGroupIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (oc *OrgCreate) AddUserIDs(ids ...string) *OrgCreate {
	oc.mutation.AddUserIDs(ids...)
	return oc
}

// AddUsers adds the "users" edges to the User entity.
func (oc *OrgCreate) AddUsers(u ...*User) *OrgCreate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return oc.AddUserIDs(ids...)
}

// AddNamespaceIDs adds the "namespaces" edge to the Namespace entity by IDs.
func (oc *OrgCreate) AddNamespaceIDs(ids ...string) *OrgCreate {
	oc.mutation.AddNamespaceIDs(ids...)
	return oc
}

// AddNamespaces adds the "namespaces" edges to the Namespace entity.
func (oc *OrgCreate) AddNamespaces(n ...*Namespace) *OrgCreate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return oc.AddNamespaceIDs(ids...)
}

// Mutation returns the OrgMutation object of the builder.
func (oc *OrgCreate) Mutation() *OrgMutation {
	return oc.mutation
}

// Save creates the Org in the database.
func (oc *OrgCreate) Save(ctx context.Context) (*Org, error) {
	oc.defaults()
	return withHooks(ctx, oc.sqlSave, oc.mutation, oc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OrgCreate) SaveX(ctx context.Context) *Org {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *OrgCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *OrgCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oc *OrgCreate) defaults() {
	if _, ok := oc.mutation.ID(); !ok {
		v := org.DefaultID()
		oc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *OrgCreate) check() error {
	if _, ok := oc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Org.code"`)}
	}
	if _, ok := oc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Org.name"`)}
	}
	if _, ok := oc.mutation.Ctime(); !ok {
		return &ValidationError{Name: "ctime", err: errors.New(`ent: missing required field "Org.ctime"`)}
	}
	if _, ok := oc.mutation.Mtime(); !ok {
		return &ValidationError{Name: "mtime", err: errors.New(`ent: missing required field "Org.mtime"`)}
	}
	if _, ok := oc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New(`ent: missing required field "Org.deleted"`)}
	}
	return nil
}

func (oc *OrgCreate) sqlSave(ctx context.Context) (*Org, error) {
	if err := oc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Org.ID type: %T", _spec.ID.Value)
		}
	}
	oc.mutation.id = &_node.ID
	oc.mutation.done = true
	return _node, nil
}

func (oc *OrgCreate) createSpec() (*Org, *sqlgraph.CreateSpec) {
	var (
		_node = &Org{config: oc.config}
		_spec = sqlgraph.NewCreateSpec(org.Table, sqlgraph.NewFieldSpec(org.FieldID, field.TypeString))
	)
	_spec.OnConflict = oc.conflict
	if id, ok := oc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := oc.mutation.Code(); ok {
		_spec.SetField(org.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := oc.mutation.Name(); ok {
		_spec.SetField(org.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := oc.mutation.Ctime(); ok {
		_spec.SetField(org.FieldCtime, field.TypeTime, value)
		_node.Ctime = value
	}
	if value, ok := oc.mutation.Mtime(); ok {
		_spec.SetField(org.FieldMtime, field.TypeTime, value)
		_node.Mtime = value
	}
	if value, ok := oc.mutation.Deleted(); ok {
		_spec.SetField(org.FieldDeleted, field.TypeBool, value)
		_node.Deleted = value
	}
	if nodes := oc.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.GroupsTable,
			Columns: []string{org.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.UsersTable,
			Columns: []string{org.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.NamespacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.NamespacesTable,
			Columns: []string{org.NamespacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(namespace.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Org.Create().
//		SetCode(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrgUpsert) {
//			SetCode(v+v).
//		}).
//		Exec(ctx)
func (oc *OrgCreate) OnConflict(opts ...sql.ConflictOption) *OrgUpsertOne {
	oc.conflict = opts
	return &OrgUpsertOne{
		create: oc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Org.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oc *OrgCreate) OnConflictColumns(columns ...string) *OrgUpsertOne {
	oc.conflict = append(oc.conflict, sql.ConflictColumns(columns...))
	return &OrgUpsertOne{
		create: oc,
	}
}

type (
	// OrgUpsertOne is the builder for "upsert"-ing
	//  one Org node.
	OrgUpsertOne struct {
		create *OrgCreate
	}

	// OrgUpsert is the "OnConflict" setter.
	OrgUpsert struct {
		*sql.UpdateSet
	}
)

// SetCode sets the "code" field.
func (u *OrgUpsert) SetCode(v string) *OrgUpsert {
	u.Set(org.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *OrgUpsert) UpdateCode() *OrgUpsert {
	u.SetExcluded(org.FieldCode)
	return u
}

// SetName sets the "name" field.
func (u *OrgUpsert) SetName(v string) *OrgUpsert {
	u.Set(org.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OrgUpsert) UpdateName() *OrgUpsert {
	u.SetExcluded(org.FieldName)
	return u
}

// SetCtime sets the "ctime" field.
func (u *OrgUpsert) SetCtime(v time.Time) *OrgUpsert {
	u.Set(org.FieldCtime, v)
	return u
}

// UpdateCtime sets the "ctime" field to the value that was provided on create.
func (u *OrgUpsert) UpdateCtime() *OrgUpsert {
	u.SetExcluded(org.FieldCtime)
	return u
}

// SetMtime sets the "mtime" field.
func (u *OrgUpsert) SetMtime(v time.Time) *OrgUpsert {
	u.Set(org.FieldMtime, v)
	return u
}

// UpdateMtime sets the "mtime" field to the value that was provided on create.
func (u *OrgUpsert) UpdateMtime() *OrgUpsert {
	u.SetExcluded(org.FieldMtime)
	return u
}

// SetDeleted sets the "deleted" field.
func (u *OrgUpsert) SetDeleted(v bool) *OrgUpsert {
	u.Set(org.FieldDeleted, v)
	return u
}

// UpdateDeleted sets the "deleted" field to the value that was provided on create.
func (u *OrgUpsert) UpdateDeleted() *OrgUpsert {
	u.SetExcluded(org.FieldDeleted)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Org.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(org.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrgUpsertOne) UpdateNewValues() *OrgUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(org.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Org.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OrgUpsertOne) Ignore() *OrgUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrgUpsertOne) DoNothing() *OrgUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrgCreate.OnConflict
// documentation for more info.
func (u *OrgUpsertOne) Update(set func(*OrgUpsert)) *OrgUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrgUpsert{UpdateSet: update})
	}))
	return u
}

// SetCode sets the "code" field.
func (u *OrgUpsertOne) SetCode(v string) *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *OrgUpsertOne) UpdateCode() *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.UpdateCode()
	})
}

// SetName sets the "name" field.
func (u *OrgUpsertOne) SetName(v string) *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OrgUpsertOne) UpdateName() *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.UpdateName()
	})
}

// SetCtime sets the "ctime" field.
func (u *OrgUpsertOne) SetCtime(v time.Time) *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.SetCtime(v)
	})
}

// UpdateCtime sets the "ctime" field to the value that was provided on create.
func (u *OrgUpsertOne) UpdateCtime() *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.UpdateCtime()
	})
}

// SetMtime sets the "mtime" field.
func (u *OrgUpsertOne) SetMtime(v time.Time) *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.SetMtime(v)
	})
}

// UpdateMtime sets the "mtime" field to the value that was provided on create.
func (u *OrgUpsertOne) UpdateMtime() *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.UpdateMtime()
	})
}

// SetDeleted sets the "deleted" field.
func (u *OrgUpsertOne) SetDeleted(v bool) *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.SetDeleted(v)
	})
}

// UpdateDeleted sets the "deleted" field to the value that was provided on create.
func (u *OrgUpsertOne) UpdateDeleted() *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.UpdateDeleted()
	})
}

// Exec executes the query.
func (u *OrgUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrgCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrgUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrgUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: OrgUpsertOne.ID is not supported by MySQL driver. Use OrgUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrgUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrgCreateBulk is the builder for creating many Org entities in bulk.
type OrgCreateBulk struct {
	config
	err      error
	builders []*OrgCreate
	conflict []sql.ConflictOption
}

// Save creates the Org entities in the database.
func (ocb *OrgCreateBulk) Save(ctx context.Context) ([]*Org, error) {
	if ocb.err != nil {
		return nil, ocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Org, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrgMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OrgCreateBulk) SaveX(ctx context.Context) []*Org {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *OrgCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *OrgCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Org.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrgUpsert) {
//			SetCode(v+v).
//		}).
//		Exec(ctx)
func (ocb *OrgCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrgUpsertBulk {
	ocb.conflict = opts
	return &OrgUpsertBulk{
		create: ocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Org.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ocb *OrgCreateBulk) OnConflictColumns(columns ...string) *OrgUpsertBulk {
	ocb.conflict = append(ocb.conflict, sql.ConflictColumns(columns...))
	return &OrgUpsertBulk{
		create: ocb,
	}
}

// OrgUpsertBulk is the builder for "upsert"-ing
// a bulk of Org nodes.
type OrgUpsertBulk struct {
	create *OrgCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Org.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(org.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrgUpsertBulk) UpdateNewValues() *OrgUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(org.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Org.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OrgUpsertBulk) Ignore() *OrgUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrgUpsertBulk) DoNothing() *OrgUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrgCreateBulk.OnConflict
// documentation for more info.
func (u *OrgUpsertBulk) Update(set func(*OrgUpsert)) *OrgUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrgUpsert{UpdateSet: update})
	}))
	return u
}

// SetCode sets the "code" field.
func (u *OrgUpsertBulk) SetCode(v string) *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *OrgUpsertBulk) UpdateCode() *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.UpdateCode()
	})
}

// SetName sets the "name" field.
func (u *OrgUpsertBulk) SetName(v string) *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OrgUpsertBulk) UpdateName() *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.UpdateName()
	})
}

// SetCtime sets the "ctime" field.
func (u *OrgUpsertBulk) SetCtime(v time.Time) *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.SetCtime(v)
	})
}

// UpdateCtime sets the "ctime" field to the value that was provided on create.
func (u *OrgUpsertBulk) UpdateCtime() *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.UpdateCtime()
	})
}

// SetMtime sets the "mtime" field.
func (u *OrgUpsertBulk) SetMtime(v time.Time) *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.SetMtime(v)
	})
}

// UpdateMtime sets the "mtime" field to the value that was provided on create.
func (u *OrgUpsertBulk) UpdateMtime() *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.UpdateMtime()
	})
}

// SetDeleted sets the "deleted" field.
func (u *OrgUpsertBulk) SetDeleted(v bool) *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.SetDeleted(v)
	})
}

// UpdateDeleted sets the "deleted" field to the value that was provided on create.
func (u *OrgUpsertBulk) UpdateDeleted() *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.UpdateDeleted()
	})
}

// Exec executes the query.
func (u *OrgUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OrgCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrgCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrgUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
