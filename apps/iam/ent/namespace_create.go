// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"infra-kit/apps/iam/ent/namespace"
	"infra-kit/apps/iam/ent/org"
	"infra-kit/apps/iam/ent/user"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NamespaceCreate is the builder for creating a Namespace entity.
type NamespaceCreate struct {
	config
	mutation *NamespaceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCode sets the "code" field.
func (nc *NamespaceCreate) SetCode(s string) *NamespaceCreate {
	nc.mutation.SetCode(s)
	return nc
}

// SetName sets the "name" field.
func (nc *NamespaceCreate) SetName(s string) *NamespaceCreate {
	nc.mutation.SetName(s)
	return nc
}

// SetDescription sets the "description" field.
func (nc *NamespaceCreate) SetDescription(s string) *NamespaceCreate {
	nc.mutation.SetDescription(s)
	return nc
}

// SetLabel sets the "label" field.
func (nc *NamespaceCreate) SetLabel(s string) *NamespaceCreate {
	nc.mutation.SetLabel(s)
	return nc
}

// SetCtime sets the "ctime" field.
func (nc *NamespaceCreate) SetCtime(t time.Time) *NamespaceCreate {
	nc.mutation.SetCtime(t)
	return nc
}

// SetMtime sets the "mtime" field.
func (nc *NamespaceCreate) SetMtime(t time.Time) *NamespaceCreate {
	nc.mutation.SetMtime(t)
	return nc
}

// SetDeleted sets the "deleted" field.
func (nc *NamespaceCreate) SetDeleted(b bool) *NamespaceCreate {
	nc.mutation.SetDeleted(b)
	return nc
}

// SetID sets the "id" field.
func (nc *NamespaceCreate) SetID(s string) *NamespaceCreate {
	nc.mutation.SetID(s)
	return nc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (nc *NamespaceCreate) SetNillableID(s *string) *NamespaceCreate {
	if s != nil {
		nc.SetID(*s)
	}
	return nc
}

// SetOrgID sets the "org" edge to the Org entity by ID.
func (nc *NamespaceCreate) SetOrgID(id string) *NamespaceCreate {
	nc.mutation.SetOrgID(id)
	return nc
}

// SetNillableOrgID sets the "org" edge to the Org entity by ID if the given value is not nil.
func (nc *NamespaceCreate) SetNillableOrgID(id *string) *NamespaceCreate {
	if id != nil {
		nc = nc.SetOrgID(*id)
	}
	return nc
}

// SetOrg sets the "org" edge to the Org entity.
func (nc *NamespaceCreate) SetOrg(o *Org) *NamespaceCreate {
	return nc.SetOrgID(o.ID)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (nc *NamespaceCreate) AddUserIDs(ids ...string) *NamespaceCreate {
	nc.mutation.AddUserIDs(ids...)
	return nc
}

// AddUsers adds the "users" edges to the User entity.
func (nc *NamespaceCreate) AddUsers(u ...*User) *NamespaceCreate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return nc.AddUserIDs(ids...)
}

// Mutation returns the NamespaceMutation object of the builder.
func (nc *NamespaceCreate) Mutation() *NamespaceMutation {
	return nc.mutation
}

// Save creates the Namespace in the database.
func (nc *NamespaceCreate) Save(ctx context.Context) (*Namespace, error) {
	nc.defaults()
	return withHooks(ctx, nc.sqlSave, nc.mutation, nc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (nc *NamespaceCreate) SaveX(ctx context.Context) *Namespace {
	v, err := nc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nc *NamespaceCreate) Exec(ctx context.Context) error {
	_, err := nc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nc *NamespaceCreate) ExecX(ctx context.Context) {
	if err := nc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nc *NamespaceCreate) defaults() {
	if _, ok := nc.mutation.ID(); !ok {
		v := namespace.DefaultID()
		nc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nc *NamespaceCreate) check() error {
	if _, ok := nc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Namespace.code"`)}
	}
	if _, ok := nc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Namespace.name"`)}
	}
	if _, ok := nc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Namespace.description"`)}
	}
	if _, ok := nc.mutation.Label(); !ok {
		return &ValidationError{Name: "label", err: errors.New(`ent: missing required field "Namespace.label"`)}
	}
	if _, ok := nc.mutation.Ctime(); !ok {
		return &ValidationError{Name: "ctime", err: errors.New(`ent: missing required field "Namespace.ctime"`)}
	}
	if _, ok := nc.mutation.Mtime(); !ok {
		return &ValidationError{Name: "mtime", err: errors.New(`ent: missing required field "Namespace.mtime"`)}
	}
	if _, ok := nc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New(`ent: missing required field "Namespace.deleted"`)}
	}
	return nil
}

func (nc *NamespaceCreate) sqlSave(ctx context.Context) (*Namespace, error) {
	if err := nc.check(); err != nil {
		return nil, err
	}
	_node, _spec := nc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Namespace.ID type: %T", _spec.ID.Value)
		}
	}
	nc.mutation.id = &_node.ID
	nc.mutation.done = true
	return _node, nil
}

func (nc *NamespaceCreate) createSpec() (*Namespace, *sqlgraph.CreateSpec) {
	var (
		_node = &Namespace{config: nc.config}
		_spec = sqlgraph.NewCreateSpec(namespace.Table, sqlgraph.NewFieldSpec(namespace.FieldID, field.TypeString))
	)
	_spec.OnConflict = nc.conflict
	if id, ok := nc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := nc.mutation.Code(); ok {
		_spec.SetField(namespace.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := nc.mutation.Name(); ok {
		_spec.SetField(namespace.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := nc.mutation.Description(); ok {
		_spec.SetField(namespace.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := nc.mutation.Label(); ok {
		_spec.SetField(namespace.FieldLabel, field.TypeString, value)
		_node.Label = value
	}
	if value, ok := nc.mutation.Ctime(); ok {
		_spec.SetField(namespace.FieldCtime, field.TypeTime, value)
		_node.Ctime = value
	}
	if value, ok := nc.mutation.Mtime(); ok {
		_spec.SetField(namespace.FieldMtime, field.TypeTime, value)
		_node.Mtime = value
	}
	if value, ok := nc.mutation.Deleted(); ok {
		_spec.SetField(namespace.FieldDeleted, field.TypeBool, value)
		_node.Deleted = value
	}
	if nodes := nc.mutation.OrgIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   namespace.OrgTable,
			Columns: []string{namespace.OrgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(org.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.org_namespaces = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   namespace.UsersTable,
			Columns: namespace.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Namespace.Create().
//		SetCode(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NamespaceUpsert) {
//			SetCode(v+v).
//		}).
//		Exec(ctx)
func (nc *NamespaceCreate) OnConflict(opts ...sql.ConflictOption) *NamespaceUpsertOne {
	nc.conflict = opts
	return &NamespaceUpsertOne{
		create: nc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Namespace.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (nc *NamespaceCreate) OnConflictColumns(columns ...string) *NamespaceUpsertOne {
	nc.conflict = append(nc.conflict, sql.ConflictColumns(columns...))
	return &NamespaceUpsertOne{
		create: nc,
	}
}

type (
	// NamespaceUpsertOne is the builder for "upsert"-ing
	//  one Namespace node.
	NamespaceUpsertOne struct {
		create *NamespaceCreate
	}

	// NamespaceUpsert is the "OnConflict" setter.
	NamespaceUpsert struct {
		*sql.UpdateSet
	}
)

// SetCode sets the "code" field.
func (u *NamespaceUpsert) SetCode(v string) *NamespaceUpsert {
	u.Set(namespace.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *NamespaceUpsert) UpdateCode() *NamespaceUpsert {
	u.SetExcluded(namespace.FieldCode)
	return u
}

// SetName sets the "name" field.
func (u *NamespaceUpsert) SetName(v string) *NamespaceUpsert {
	u.Set(namespace.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *NamespaceUpsert) UpdateName() *NamespaceUpsert {
	u.SetExcluded(namespace.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *NamespaceUpsert) SetDescription(v string) *NamespaceUpsert {
	u.Set(namespace.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *NamespaceUpsert) UpdateDescription() *NamespaceUpsert {
	u.SetExcluded(namespace.FieldDescription)
	return u
}

// SetLabel sets the "label" field.
func (u *NamespaceUpsert) SetLabel(v string) *NamespaceUpsert {
	u.Set(namespace.FieldLabel, v)
	return u
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *NamespaceUpsert) UpdateLabel() *NamespaceUpsert {
	u.SetExcluded(namespace.FieldLabel)
	return u
}

// SetCtime sets the "ctime" field.
func (u *NamespaceUpsert) SetCtime(v time.Time) *NamespaceUpsert {
	u.Set(namespace.FieldCtime, v)
	return u
}

// UpdateCtime sets the "ctime" field to the value that was provided on create.
func (u *NamespaceUpsert) UpdateCtime() *NamespaceUpsert {
	u.SetExcluded(namespace.FieldCtime)
	return u
}

// SetMtime sets the "mtime" field.
func (u *NamespaceUpsert) SetMtime(v time.Time) *NamespaceUpsert {
	u.Set(namespace.FieldMtime, v)
	return u
}

// UpdateMtime sets the "mtime" field to the value that was provided on create.
func (u *NamespaceUpsert) UpdateMtime() *NamespaceUpsert {
	u.SetExcluded(namespace.FieldMtime)
	return u
}

// SetDeleted sets the "deleted" field.
func (u *NamespaceUpsert) SetDeleted(v bool) *NamespaceUpsert {
	u.Set(namespace.FieldDeleted, v)
	return u
}

// UpdateDeleted sets the "deleted" field to the value that was provided on create.
func (u *NamespaceUpsert) UpdateDeleted() *NamespaceUpsert {
	u.SetExcluded(namespace.FieldDeleted)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Namespace.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(namespace.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *NamespaceUpsertOne) UpdateNewValues() *NamespaceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(namespace.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Namespace.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *NamespaceUpsertOne) Ignore() *NamespaceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NamespaceUpsertOne) DoNothing() *NamespaceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NamespaceCreate.OnConflict
// documentation for more info.
func (u *NamespaceUpsertOne) Update(set func(*NamespaceUpsert)) *NamespaceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NamespaceUpsert{UpdateSet: update})
	}))
	return u
}

// SetCode sets the "code" field.
func (u *NamespaceUpsertOne) SetCode(v string) *NamespaceUpsertOne {
	return u.Update(func(s *NamespaceUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *NamespaceUpsertOne) UpdateCode() *NamespaceUpsertOne {
	return u.Update(func(s *NamespaceUpsert) {
		s.UpdateCode()
	})
}

// SetName sets the "name" field.
func (u *NamespaceUpsertOne) SetName(v string) *NamespaceUpsertOne {
	return u.Update(func(s *NamespaceUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *NamespaceUpsertOne) UpdateName() *NamespaceUpsertOne {
	return u.Update(func(s *NamespaceUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *NamespaceUpsertOne) SetDescription(v string) *NamespaceUpsertOne {
	return u.Update(func(s *NamespaceUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *NamespaceUpsertOne) UpdateDescription() *NamespaceUpsertOne {
	return u.Update(func(s *NamespaceUpsert) {
		s.UpdateDescription()
	})
}

// SetLabel sets the "label" field.
func (u *NamespaceUpsertOne) SetLabel(v string) *NamespaceUpsertOne {
	return u.Update(func(s *NamespaceUpsert) {
		s.SetLabel(v)
	})
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *NamespaceUpsertOne) UpdateLabel() *NamespaceUpsertOne {
	return u.Update(func(s *NamespaceUpsert) {
		s.UpdateLabel()
	})
}

// SetCtime sets the "ctime" field.
func (u *NamespaceUpsertOne) SetCtime(v time.Time) *NamespaceUpsertOne {
	return u.Update(func(s *NamespaceUpsert) {
		s.SetCtime(v)
	})
}

// UpdateCtime sets the "ctime" field to the value that was provided on create.
func (u *NamespaceUpsertOne) UpdateCtime() *NamespaceUpsertOne {
	return u.Update(func(s *NamespaceUpsert) {
		s.UpdateCtime()
	})
}

// SetMtime sets the "mtime" field.
func (u *NamespaceUpsertOne) SetMtime(v time.Time) *NamespaceUpsertOne {
	return u.Update(func(s *NamespaceUpsert) {
		s.SetMtime(v)
	})
}

// UpdateMtime sets the "mtime" field to the value that was provided on create.
func (u *NamespaceUpsertOne) UpdateMtime() *NamespaceUpsertOne {
	return u.Update(func(s *NamespaceUpsert) {
		s.UpdateMtime()
	})
}

// SetDeleted sets the "deleted" field.
func (u *NamespaceUpsertOne) SetDeleted(v bool) *NamespaceUpsertOne {
	return u.Update(func(s *NamespaceUpsert) {
		s.SetDeleted(v)
	})
}

// UpdateDeleted sets the "deleted" field to the value that was provided on create.
func (u *NamespaceUpsertOne) UpdateDeleted() *NamespaceUpsertOne {
	return u.Update(func(s *NamespaceUpsert) {
		s.UpdateDeleted()
	})
}

// Exec executes the query.
func (u *NamespaceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for NamespaceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NamespaceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *NamespaceUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: NamespaceUpsertOne.ID is not supported by MySQL driver. Use NamespaceUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *NamespaceUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// NamespaceCreateBulk is the builder for creating many Namespace entities in bulk.
type NamespaceCreateBulk struct {
	config
	err      error
	builders []*NamespaceCreate
	conflict []sql.ConflictOption
}

// Save creates the Namespace entities in the database.
func (ncb *NamespaceCreateBulk) Save(ctx context.Context) ([]*Namespace, error) {
	if ncb.err != nil {
		return nil, ncb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ncb.builders))
	nodes := make([]*Namespace, len(ncb.builders))
	mutators := make([]Mutator, len(ncb.builders))
	for i := range ncb.builders {
		func(i int, root context.Context) {
			builder := ncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NamespaceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ncb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ncb *NamespaceCreateBulk) SaveX(ctx context.Context) []*Namespace {
	v, err := ncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ncb *NamespaceCreateBulk) Exec(ctx context.Context) error {
	_, err := ncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncb *NamespaceCreateBulk) ExecX(ctx context.Context) {
	if err := ncb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Namespace.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NamespaceUpsert) {
//			SetCode(v+v).
//		}).
//		Exec(ctx)
func (ncb *NamespaceCreateBulk) OnConflict(opts ...sql.ConflictOption) *NamespaceUpsertBulk {
	ncb.conflict = opts
	return &NamespaceUpsertBulk{
		create: ncb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Namespace.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ncb *NamespaceCreateBulk) OnConflictColumns(columns ...string) *NamespaceUpsertBulk {
	ncb.conflict = append(ncb.conflict, sql.ConflictColumns(columns...))
	return &NamespaceUpsertBulk{
		create: ncb,
	}
}

// NamespaceUpsertBulk is the builder for "upsert"-ing
// a bulk of Namespace nodes.
type NamespaceUpsertBulk struct {
	create *NamespaceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Namespace.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(namespace.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *NamespaceUpsertBulk) UpdateNewValues() *NamespaceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(namespace.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Namespace.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *NamespaceUpsertBulk) Ignore() *NamespaceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NamespaceUpsertBulk) DoNothing() *NamespaceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NamespaceCreateBulk.OnConflict
// documentation for more info.
func (u *NamespaceUpsertBulk) Update(set func(*NamespaceUpsert)) *NamespaceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NamespaceUpsert{UpdateSet: update})
	}))
	return u
}

// SetCode sets the "code" field.
func (u *NamespaceUpsertBulk) SetCode(v string) *NamespaceUpsertBulk {
	return u.Update(func(s *NamespaceUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *NamespaceUpsertBulk) UpdateCode() *NamespaceUpsertBulk {
	return u.Update(func(s *NamespaceUpsert) {
		s.UpdateCode()
	})
}

// SetName sets the "name" field.
func (u *NamespaceUpsertBulk) SetName(v string) *NamespaceUpsertBulk {
	return u.Update(func(s *NamespaceUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *NamespaceUpsertBulk) UpdateName() *NamespaceUpsertBulk {
	return u.Update(func(s *NamespaceUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *NamespaceUpsertBulk) SetDescription(v string) *NamespaceUpsertBulk {
	return u.Update(func(s *NamespaceUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *NamespaceUpsertBulk) UpdateDescription() *NamespaceUpsertBulk {
	return u.Update(func(s *NamespaceUpsert) {
		s.UpdateDescription()
	})
}

// SetLabel sets the "label" field.
func (u *NamespaceUpsertBulk) SetLabel(v string) *NamespaceUpsertBulk {
	return u.Update(func(s *NamespaceUpsert) {
		s.SetLabel(v)
	})
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *NamespaceUpsertBulk) UpdateLabel() *NamespaceUpsertBulk {
	return u.Update(func(s *NamespaceUpsert) {
		s.UpdateLabel()
	})
}

// SetCtime sets the "ctime" field.
func (u *NamespaceUpsertBulk) SetCtime(v time.Time) *NamespaceUpsertBulk {
	return u.Update(func(s *NamespaceUpsert) {
		s.SetCtime(v)
	})
}

// UpdateCtime sets the "ctime" field to the value that was provided on create.
func (u *NamespaceUpsertBulk) UpdateCtime() *NamespaceUpsertBulk {
	return u.Update(func(s *NamespaceUpsert) {
		s.UpdateCtime()
	})
}

// SetMtime sets the "mtime" field.
func (u *NamespaceUpsertBulk) SetMtime(v time.Time) *NamespaceUpsertBulk {
	return u.Update(func(s *NamespaceUpsert) {
		s.SetMtime(v)
	})
}

// UpdateMtime sets the "mtime" field to the value that was provided on create.
func (u *NamespaceUpsertBulk) UpdateMtime() *NamespaceUpsertBulk {
	return u.Update(func(s *NamespaceUpsert) {
		s.UpdateMtime()
	})
}

// SetDeleted sets the "deleted" field.
func (u *NamespaceUpsertBulk) SetDeleted(v bool) *NamespaceUpsertBulk {
	return u.Update(func(s *NamespaceUpsert) {
		s.SetDeleted(v)
	})
}

// UpdateDeleted sets the "deleted" field to the value that was provided on create.
func (u *NamespaceUpsertBulk) UpdateDeleted() *NamespaceUpsertBulk {
	return u.Update(func(s *NamespaceUpsert) {
		s.UpdateDeleted()
	})
}

// Exec executes the query.
func (u *NamespaceUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the NamespaceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for NamespaceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NamespaceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
