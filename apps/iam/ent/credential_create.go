// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"infra-kit/apps/iam/ent/credential"
	"infra-kit/apps/iam/ent/user"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CredentialCreate is the builder for creating a Credential entity.
type CredentialCreate struct {
	config
	mutation *CredentialMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAk sets the "ak" field.
func (cc *CredentialCreate) SetAk(s string) *CredentialCreate {
	cc.mutation.SetAk(s)
	return cc
}

// SetSk sets the "sk" field.
func (cc *CredentialCreate) SetSk(s string) *CredentialCreate {
	cc.mutation.SetSk(s)
	return cc
}

// SetCtime sets the "ctime" field.
func (cc *CredentialCreate) SetCtime(t time.Time) *CredentialCreate {
	cc.mutation.SetCtime(t)
	return cc
}

// SetMtime sets the "mtime" field.
func (cc *CredentialCreate) SetMtime(t time.Time) *CredentialCreate {
	cc.mutation.SetMtime(t)
	return cc
}

// SetDeleted sets the "deleted" field.
func (cc *CredentialCreate) SetDeleted(b bool) *CredentialCreate {
	cc.mutation.SetDeleted(b)
	return cc
}

// SetID sets the "id" field.
func (cc *CredentialCreate) SetID(s string) *CredentialCreate {
	cc.mutation.SetID(s)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *CredentialCreate) SetNillableID(s *string) *CredentialCreate {
	if s != nil {
		cc.SetID(*s)
	}
	return cc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (cc *CredentialCreate) SetUserID(id string) *CredentialCreate {
	cc.mutation.SetUserID(id)
	return cc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (cc *CredentialCreate) SetNillableUserID(id *string) *CredentialCreate {
	if id != nil {
		cc = cc.SetUserID(*id)
	}
	return cc
}

// SetUser sets the "user" edge to the User entity.
func (cc *CredentialCreate) SetUser(u *User) *CredentialCreate {
	return cc.SetUserID(u.ID)
}

// Mutation returns the CredentialMutation object of the builder.
func (cc *CredentialCreate) Mutation() *CredentialMutation {
	return cc.mutation
}

// Save creates the Credential in the database.
func (cc *CredentialCreate) Save(ctx context.Context) (*Credential, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CredentialCreate) SaveX(ctx context.Context) *Credential {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CredentialCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CredentialCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CredentialCreate) defaults() {
	if _, ok := cc.mutation.ID(); !ok {
		v := credential.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CredentialCreate) check() error {
	if _, ok := cc.mutation.Ak(); !ok {
		return &ValidationError{Name: "ak", err: errors.New(`ent: missing required field "Credential.ak"`)}
	}
	if _, ok := cc.mutation.Sk(); !ok {
		return &ValidationError{Name: "sk", err: errors.New(`ent: missing required field "Credential.sk"`)}
	}
	if _, ok := cc.mutation.Ctime(); !ok {
		return &ValidationError{Name: "ctime", err: errors.New(`ent: missing required field "Credential.ctime"`)}
	}
	if _, ok := cc.mutation.Mtime(); !ok {
		return &ValidationError{Name: "mtime", err: errors.New(`ent: missing required field "Credential.mtime"`)}
	}
	if _, ok := cc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New(`ent: missing required field "Credential.deleted"`)}
	}
	return nil
}

func (cc *CredentialCreate) sqlSave(ctx context.Context) (*Credential, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Credential.ID type: %T", _spec.ID.Value)
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CredentialCreate) createSpec() (*Credential, *sqlgraph.CreateSpec) {
	var (
		_node = &Credential{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(credential.Table, sqlgraph.NewFieldSpec(credential.FieldID, field.TypeString))
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.Ak(); ok {
		_spec.SetField(credential.FieldAk, field.TypeString, value)
		_node.Ak = value
	}
	if value, ok := cc.mutation.Sk(); ok {
		_spec.SetField(credential.FieldSk, field.TypeString, value)
		_node.Sk = value
	}
	if value, ok := cc.mutation.Ctime(); ok {
		_spec.SetField(credential.FieldCtime, field.TypeTime, value)
		_node.Ctime = value
	}
	if value, ok := cc.mutation.Mtime(); ok {
		_spec.SetField(credential.FieldMtime, field.TypeTime, value)
		_node.Mtime = value
	}
	if value, ok := cc.mutation.Deleted(); ok {
		_spec.SetField(credential.FieldDeleted, field.TypeBool, value)
		_node.Deleted = value
	}
	if nodes := cc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   credential.UserTable,
			Columns: []string{credential.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_credential = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Credential.Create().
//		SetAk(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CredentialUpsert) {
//			SetAk(v+v).
//		}).
//		Exec(ctx)
func (cc *CredentialCreate) OnConflict(opts ...sql.ConflictOption) *CredentialUpsertOne {
	cc.conflict = opts
	return &CredentialUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Credential.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CredentialCreate) OnConflictColumns(columns ...string) *CredentialUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CredentialUpsertOne{
		create: cc,
	}
}

type (
	// CredentialUpsertOne is the builder for "upsert"-ing
	//  one Credential node.
	CredentialUpsertOne struct {
		create *CredentialCreate
	}

	// CredentialUpsert is the "OnConflict" setter.
	CredentialUpsert struct {
		*sql.UpdateSet
	}
)

// SetAk sets the "ak" field.
func (u *CredentialUpsert) SetAk(v string) *CredentialUpsert {
	u.Set(credential.FieldAk, v)
	return u
}

// UpdateAk sets the "ak" field to the value that was provided on create.
func (u *CredentialUpsert) UpdateAk() *CredentialUpsert {
	u.SetExcluded(credential.FieldAk)
	return u
}

// SetSk sets the "sk" field.
func (u *CredentialUpsert) SetSk(v string) *CredentialUpsert {
	u.Set(credential.FieldSk, v)
	return u
}

// UpdateSk sets the "sk" field to the value that was provided on create.
func (u *CredentialUpsert) UpdateSk() *CredentialUpsert {
	u.SetExcluded(credential.FieldSk)
	return u
}

// SetCtime sets the "ctime" field.
func (u *CredentialUpsert) SetCtime(v time.Time) *CredentialUpsert {
	u.Set(credential.FieldCtime, v)
	return u
}

// UpdateCtime sets the "ctime" field to the value that was provided on create.
func (u *CredentialUpsert) UpdateCtime() *CredentialUpsert {
	u.SetExcluded(credential.FieldCtime)
	return u
}

// SetMtime sets the "mtime" field.
func (u *CredentialUpsert) SetMtime(v time.Time) *CredentialUpsert {
	u.Set(credential.FieldMtime, v)
	return u
}

// UpdateMtime sets the "mtime" field to the value that was provided on create.
func (u *CredentialUpsert) UpdateMtime() *CredentialUpsert {
	u.SetExcluded(credential.FieldMtime)
	return u
}

// SetDeleted sets the "deleted" field.
func (u *CredentialUpsert) SetDeleted(v bool) *CredentialUpsert {
	u.Set(credential.FieldDeleted, v)
	return u
}

// UpdateDeleted sets the "deleted" field to the value that was provided on create.
func (u *CredentialUpsert) UpdateDeleted() *CredentialUpsert {
	u.SetExcluded(credential.FieldDeleted)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Credential.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(credential.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CredentialUpsertOne) UpdateNewValues() *CredentialUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(credential.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Credential.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CredentialUpsertOne) Ignore() *CredentialUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CredentialUpsertOne) DoNothing() *CredentialUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CredentialCreate.OnConflict
// documentation for more info.
func (u *CredentialUpsertOne) Update(set func(*CredentialUpsert)) *CredentialUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CredentialUpsert{UpdateSet: update})
	}))
	return u
}

// SetAk sets the "ak" field.
func (u *CredentialUpsertOne) SetAk(v string) *CredentialUpsertOne {
	return u.Update(func(s *CredentialUpsert) {
		s.SetAk(v)
	})
}

// UpdateAk sets the "ak" field to the value that was provided on create.
func (u *CredentialUpsertOne) UpdateAk() *CredentialUpsertOne {
	return u.Update(func(s *CredentialUpsert) {
		s.UpdateAk()
	})
}

// SetSk sets the "sk" field.
func (u *CredentialUpsertOne) SetSk(v string) *CredentialUpsertOne {
	return u.Update(func(s *CredentialUpsert) {
		s.SetSk(v)
	})
}

// UpdateSk sets the "sk" field to the value that was provided on create.
func (u *CredentialUpsertOne) UpdateSk() *CredentialUpsertOne {
	return u.Update(func(s *CredentialUpsert) {
		s.UpdateSk()
	})
}

// SetCtime sets the "ctime" field.
func (u *CredentialUpsertOne) SetCtime(v time.Time) *CredentialUpsertOne {
	return u.Update(func(s *CredentialUpsert) {
		s.SetCtime(v)
	})
}

// UpdateCtime sets the "ctime" field to the value that was provided on create.
func (u *CredentialUpsertOne) UpdateCtime() *CredentialUpsertOne {
	return u.Update(func(s *CredentialUpsert) {
		s.UpdateCtime()
	})
}

// SetMtime sets the "mtime" field.
func (u *CredentialUpsertOne) SetMtime(v time.Time) *CredentialUpsertOne {
	return u.Update(func(s *CredentialUpsert) {
		s.SetMtime(v)
	})
}

// UpdateMtime sets the "mtime" field to the value that was provided on create.
func (u *CredentialUpsertOne) UpdateMtime() *CredentialUpsertOne {
	return u.Update(func(s *CredentialUpsert) {
		s.UpdateMtime()
	})
}

// SetDeleted sets the "deleted" field.
func (u *CredentialUpsertOne) SetDeleted(v bool) *CredentialUpsertOne {
	return u.Update(func(s *CredentialUpsert) {
		s.SetDeleted(v)
	})
}

// UpdateDeleted sets the "deleted" field to the value that was provided on create.
func (u *CredentialUpsertOne) UpdateDeleted() *CredentialUpsertOne {
	return u.Update(func(s *CredentialUpsert) {
		s.UpdateDeleted()
	})
}

// Exec executes the query.
func (u *CredentialUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CredentialCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CredentialUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CredentialUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: CredentialUpsertOne.ID is not supported by MySQL driver. Use CredentialUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CredentialUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CredentialCreateBulk is the builder for creating many Credential entities in bulk.
type CredentialCreateBulk struct {
	config
	err      error
	builders []*CredentialCreate
	conflict []sql.ConflictOption
}

// Save creates the Credential entities in the database.
func (ccb *CredentialCreateBulk) Save(ctx context.Context) ([]*Credential, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Credential, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CredentialMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CredentialCreateBulk) SaveX(ctx context.Context) []*Credential {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CredentialCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CredentialCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Credential.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CredentialUpsert) {
//			SetAk(v+v).
//		}).
//		Exec(ctx)
func (ccb *CredentialCreateBulk) OnConflict(opts ...sql.ConflictOption) *CredentialUpsertBulk {
	ccb.conflict = opts
	return &CredentialUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Credential.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CredentialCreateBulk) OnConflictColumns(columns ...string) *CredentialUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CredentialUpsertBulk{
		create: ccb,
	}
}

// CredentialUpsertBulk is the builder for "upsert"-ing
// a bulk of Credential nodes.
type CredentialUpsertBulk struct {
	create *CredentialCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Credential.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(credential.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CredentialUpsertBulk) UpdateNewValues() *CredentialUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(credential.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Credential.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CredentialUpsertBulk) Ignore() *CredentialUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CredentialUpsertBulk) DoNothing() *CredentialUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CredentialCreateBulk.OnConflict
// documentation for more info.
func (u *CredentialUpsertBulk) Update(set func(*CredentialUpsert)) *CredentialUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CredentialUpsert{UpdateSet: update})
	}))
	return u
}

// SetAk sets the "ak" field.
func (u *CredentialUpsertBulk) SetAk(v string) *CredentialUpsertBulk {
	return u.Update(func(s *CredentialUpsert) {
		s.SetAk(v)
	})
}

// UpdateAk sets the "ak" field to the value that was provided on create.
func (u *CredentialUpsertBulk) UpdateAk() *CredentialUpsertBulk {
	return u.Update(func(s *CredentialUpsert) {
		s.UpdateAk()
	})
}

// SetSk sets the "sk" field.
func (u *CredentialUpsertBulk) SetSk(v string) *CredentialUpsertBulk {
	return u.Update(func(s *CredentialUpsert) {
		s.SetSk(v)
	})
}

// UpdateSk sets the "sk" field to the value that was provided on create.
func (u *CredentialUpsertBulk) UpdateSk() *CredentialUpsertBulk {
	return u.Update(func(s *CredentialUpsert) {
		s.UpdateSk()
	})
}

// SetCtime sets the "ctime" field.
func (u *CredentialUpsertBulk) SetCtime(v time.Time) *CredentialUpsertBulk {
	return u.Update(func(s *CredentialUpsert) {
		s.SetCtime(v)
	})
}

// UpdateCtime sets the "ctime" field to the value that was provided on create.
func (u *CredentialUpsertBulk) UpdateCtime() *CredentialUpsertBulk {
	return u.Update(func(s *CredentialUpsert) {
		s.UpdateCtime()
	})
}

// SetMtime sets the "mtime" field.
func (u *CredentialUpsertBulk) SetMtime(v time.Time) *CredentialUpsertBulk {
	return u.Update(func(s *CredentialUpsert) {
		s.SetMtime(v)
	})
}

// UpdateMtime sets the "mtime" field to the value that was provided on create.
func (u *CredentialUpsertBulk) UpdateMtime() *CredentialUpsertBulk {
	return u.Update(func(s *CredentialUpsert) {
		s.UpdateMtime()
	})
}

// SetDeleted sets the "deleted" field.
func (u *CredentialUpsertBulk) SetDeleted(v bool) *CredentialUpsertBulk {
	return u.Update(func(s *CredentialUpsert) {
		s.SetDeleted(v)
	})
}

// UpdateDeleted sets the "deleted" field to the value that was provided on create.
func (u *CredentialUpsertBulk) UpdateDeleted() *CredentialUpsertBulk {
	return u.Update(func(s *CredentialUpsert) {
		s.UpdateDeleted()
	})
}

// Exec executes the query.
func (u *CredentialUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CredentialCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CredentialCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CredentialUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
