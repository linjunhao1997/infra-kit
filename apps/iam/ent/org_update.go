// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"infra-kit/apps/iam/ent/group"
	"infra-kit/apps/iam/ent/namespace"
	"infra-kit/apps/iam/ent/org"
	"infra-kit/apps/iam/ent/predicate"
	"infra-kit/apps/iam/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrgUpdate is the builder for updating Org entities.
type OrgUpdate struct {
	config
	hooks    []Hook
	mutation *OrgMutation
}

// Where appends a list predicates to the OrgUpdate builder.
func (ou *OrgUpdate) Where(ps ...predicate.Org) *OrgUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetCode sets the "code" field.
func (ou *OrgUpdate) SetCode(s string) *OrgUpdate {
	ou.mutation.SetCode(s)
	return ou
}

// SetName sets the "name" field.
func (ou *OrgUpdate) SetName(s string) *OrgUpdate {
	ou.mutation.SetName(s)
	return ou
}

// SetCtime sets the "ctime" field.
func (ou *OrgUpdate) SetCtime(t time.Time) *OrgUpdate {
	ou.mutation.SetCtime(t)
	return ou
}

// SetMtime sets the "mtime" field.
func (ou *OrgUpdate) SetMtime(t time.Time) *OrgUpdate {
	ou.mutation.SetMtime(t)
	return ou
}

// SetDeleted sets the "deleted" field.
func (ou *OrgUpdate) SetDeleted(b bool) *OrgUpdate {
	ou.mutation.SetDeleted(b)
	return ou
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (ou *OrgUpdate) AddGroupIDs(ids ...string) *OrgUpdate {
	ou.mutation.AddGroupIDs(ids...)
	return ou
}

// AddGroups adds the "groups" edges to the Group entity.
func (ou *OrgUpdate) AddGroups(g ...*Group) *OrgUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ou.AddGroupIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (ou *OrgUpdate) AddUserIDs(ids ...string) *OrgUpdate {
	ou.mutation.AddUserIDs(ids...)
	return ou
}

// AddUsers adds the "users" edges to the User entity.
func (ou *OrgUpdate) AddUsers(u ...*User) *OrgUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ou.AddUserIDs(ids...)
}

// AddNamespaceIDs adds the "namespaces" edge to the Namespace entity by IDs.
func (ou *OrgUpdate) AddNamespaceIDs(ids ...string) *OrgUpdate {
	ou.mutation.AddNamespaceIDs(ids...)
	return ou
}

// AddNamespaces adds the "namespaces" edges to the Namespace entity.
func (ou *OrgUpdate) AddNamespaces(n ...*Namespace) *OrgUpdate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ou.AddNamespaceIDs(ids...)
}

// Mutation returns the OrgMutation object of the builder.
func (ou *OrgUpdate) Mutation() *OrgMutation {
	return ou.mutation
}

// ClearGroups clears all "groups" edges to the Group entity.
func (ou *OrgUpdate) ClearGroups() *OrgUpdate {
	ou.mutation.ClearGroups()
	return ou
}

// RemoveGroupIDs removes the "groups" edge to Group entities by IDs.
func (ou *OrgUpdate) RemoveGroupIDs(ids ...string) *OrgUpdate {
	ou.mutation.RemoveGroupIDs(ids...)
	return ou
}

// RemoveGroups removes "groups" edges to Group entities.
func (ou *OrgUpdate) RemoveGroups(g ...*Group) *OrgUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ou.RemoveGroupIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (ou *OrgUpdate) ClearUsers() *OrgUpdate {
	ou.mutation.ClearUsers()
	return ou
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (ou *OrgUpdate) RemoveUserIDs(ids ...string) *OrgUpdate {
	ou.mutation.RemoveUserIDs(ids...)
	return ou
}

// RemoveUsers removes "users" edges to User entities.
func (ou *OrgUpdate) RemoveUsers(u ...*User) *OrgUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ou.RemoveUserIDs(ids...)
}

// ClearNamespaces clears all "namespaces" edges to the Namespace entity.
func (ou *OrgUpdate) ClearNamespaces() *OrgUpdate {
	ou.mutation.ClearNamespaces()
	return ou
}

// RemoveNamespaceIDs removes the "namespaces" edge to Namespace entities by IDs.
func (ou *OrgUpdate) RemoveNamespaceIDs(ids ...string) *OrgUpdate {
	ou.mutation.RemoveNamespaceIDs(ids...)
	return ou
}

// RemoveNamespaces removes "namespaces" edges to Namespace entities.
func (ou *OrgUpdate) RemoveNamespaces(n ...*Namespace) *OrgUpdate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ou.RemoveNamespaceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrgUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrgUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrgUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrgUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ou *OrgUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(org.Table, org.Columns, sqlgraph.NewFieldSpec(org.FieldID, field.TypeString))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.Code(); ok {
		_spec.SetField(org.FieldCode, field.TypeString, value)
	}
	if value, ok := ou.mutation.Name(); ok {
		_spec.SetField(org.FieldName, field.TypeString, value)
	}
	if value, ok := ou.mutation.Ctime(); ok {
		_spec.SetField(org.FieldCtime, field.TypeTime, value)
	}
	if value, ok := ou.mutation.Mtime(); ok {
		_spec.SetField(org.FieldMtime, field.TypeTime, value)
	}
	if value, ok := ou.mutation.Deleted(); ok {
		_spec.SetField(org.FieldDeleted, field.TypeBool, value)
	}
	if ou.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.GroupsTable,
			Columns: []string{org.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !ou.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.GroupsTable,
			Columns: []string{org.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.GroupsTable,
			Columns: []string{org.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.UsersTable,
			Columns: []string{org.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedUsersIDs(); len(nodes) > 0 && !ou.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.UsersTable,
			Columns: []string{org.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.UsersTable,
			Columns: []string{org.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.NamespacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.NamespacesTable,
			Columns: []string{org.NamespacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(namespace.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedNamespacesIDs(); len(nodes) > 0 && !ou.mutation.NamespacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.NamespacesTable,
			Columns: []string{org.NamespacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(namespace.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.NamespacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.NamespacesTable,
			Columns: []string{org.NamespacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(namespace.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{org.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OrgUpdateOne is the builder for updating a single Org entity.
type OrgUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrgMutation
}

// SetCode sets the "code" field.
func (ouo *OrgUpdateOne) SetCode(s string) *OrgUpdateOne {
	ouo.mutation.SetCode(s)
	return ouo
}

// SetName sets the "name" field.
func (ouo *OrgUpdateOne) SetName(s string) *OrgUpdateOne {
	ouo.mutation.SetName(s)
	return ouo
}

// SetCtime sets the "ctime" field.
func (ouo *OrgUpdateOne) SetCtime(t time.Time) *OrgUpdateOne {
	ouo.mutation.SetCtime(t)
	return ouo
}

// SetMtime sets the "mtime" field.
func (ouo *OrgUpdateOne) SetMtime(t time.Time) *OrgUpdateOne {
	ouo.mutation.SetMtime(t)
	return ouo
}

// SetDeleted sets the "deleted" field.
func (ouo *OrgUpdateOne) SetDeleted(b bool) *OrgUpdateOne {
	ouo.mutation.SetDeleted(b)
	return ouo
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (ouo *OrgUpdateOne) AddGroupIDs(ids ...string) *OrgUpdateOne {
	ouo.mutation.AddGroupIDs(ids...)
	return ouo
}

// AddGroups adds the "groups" edges to the Group entity.
func (ouo *OrgUpdateOne) AddGroups(g ...*Group) *OrgUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ouo.AddGroupIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (ouo *OrgUpdateOne) AddUserIDs(ids ...string) *OrgUpdateOne {
	ouo.mutation.AddUserIDs(ids...)
	return ouo
}

// AddUsers adds the "users" edges to the User entity.
func (ouo *OrgUpdateOne) AddUsers(u ...*User) *OrgUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ouo.AddUserIDs(ids...)
}

// AddNamespaceIDs adds the "namespaces" edge to the Namespace entity by IDs.
func (ouo *OrgUpdateOne) AddNamespaceIDs(ids ...string) *OrgUpdateOne {
	ouo.mutation.AddNamespaceIDs(ids...)
	return ouo
}

// AddNamespaces adds the "namespaces" edges to the Namespace entity.
func (ouo *OrgUpdateOne) AddNamespaces(n ...*Namespace) *OrgUpdateOne {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ouo.AddNamespaceIDs(ids...)
}

// Mutation returns the OrgMutation object of the builder.
func (ouo *OrgUpdateOne) Mutation() *OrgMutation {
	return ouo.mutation
}

// ClearGroups clears all "groups" edges to the Group entity.
func (ouo *OrgUpdateOne) ClearGroups() *OrgUpdateOne {
	ouo.mutation.ClearGroups()
	return ouo
}

// RemoveGroupIDs removes the "groups" edge to Group entities by IDs.
func (ouo *OrgUpdateOne) RemoveGroupIDs(ids ...string) *OrgUpdateOne {
	ouo.mutation.RemoveGroupIDs(ids...)
	return ouo
}

// RemoveGroups removes "groups" edges to Group entities.
func (ouo *OrgUpdateOne) RemoveGroups(g ...*Group) *OrgUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ouo.RemoveGroupIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (ouo *OrgUpdateOne) ClearUsers() *OrgUpdateOne {
	ouo.mutation.ClearUsers()
	return ouo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (ouo *OrgUpdateOne) RemoveUserIDs(ids ...string) *OrgUpdateOne {
	ouo.mutation.RemoveUserIDs(ids...)
	return ouo
}

// RemoveUsers removes "users" edges to User entities.
func (ouo *OrgUpdateOne) RemoveUsers(u ...*User) *OrgUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ouo.RemoveUserIDs(ids...)
}

// ClearNamespaces clears all "namespaces" edges to the Namespace entity.
func (ouo *OrgUpdateOne) ClearNamespaces() *OrgUpdateOne {
	ouo.mutation.ClearNamespaces()
	return ouo
}

// RemoveNamespaceIDs removes the "namespaces" edge to Namespace entities by IDs.
func (ouo *OrgUpdateOne) RemoveNamespaceIDs(ids ...string) *OrgUpdateOne {
	ouo.mutation.RemoveNamespaceIDs(ids...)
	return ouo
}

// RemoveNamespaces removes "namespaces" edges to Namespace entities.
func (ouo *OrgUpdateOne) RemoveNamespaces(n ...*Namespace) *OrgUpdateOne {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ouo.RemoveNamespaceIDs(ids...)
}

// Where appends a list predicates to the OrgUpdate builder.
func (ouo *OrgUpdateOne) Where(ps ...predicate.Org) *OrgUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrgUpdateOne) Select(field string, fields ...string) *OrgUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Org entity.
func (ouo *OrgUpdateOne) Save(ctx context.Context) (*Org, error) {
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrgUpdateOne) SaveX(ctx context.Context) *Org {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrgUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrgUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ouo *OrgUpdateOne) sqlSave(ctx context.Context) (_node *Org, err error) {
	_spec := sqlgraph.NewUpdateSpec(org.Table, org.Columns, sqlgraph.NewFieldSpec(org.FieldID, field.TypeString))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Org.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, org.FieldID)
		for _, f := range fields {
			if !org.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != org.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.Code(); ok {
		_spec.SetField(org.FieldCode, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Name(); ok {
		_spec.SetField(org.FieldName, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Ctime(); ok {
		_spec.SetField(org.FieldCtime, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.Mtime(); ok {
		_spec.SetField(org.FieldMtime, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.Deleted(); ok {
		_spec.SetField(org.FieldDeleted, field.TypeBool, value)
	}
	if ouo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.GroupsTable,
			Columns: []string{org.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !ouo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.GroupsTable,
			Columns: []string{org.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.GroupsTable,
			Columns: []string{org.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.UsersTable,
			Columns: []string{org.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !ouo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.UsersTable,
			Columns: []string{org.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.UsersTable,
			Columns: []string{org.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.NamespacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.NamespacesTable,
			Columns: []string{org.NamespacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(namespace.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedNamespacesIDs(); len(nodes) > 0 && !ouo.mutation.NamespacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.NamespacesTable,
			Columns: []string{org.NamespacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(namespace.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.NamespacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.NamespacesTable,
			Columns: []string{org.NamespacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(namespace.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Org{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{org.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
