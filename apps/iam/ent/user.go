// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"infra-kit/apps/iam/ent/credential"
	"infra-kit/apps/iam/ent/org"
	"infra-kit/apps/iam/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Disabled holds the value of the "disabled" field.
	Disabled bool `json:"disabled,omitempty"`
	// Ver holds the value of the "ver" field.
	Ver int `json:"ver,omitempty"`
	// Ctime holds the value of the "ctime" field.
	Ctime time.Time `json:"ctime,omitempty"`
	// Mtime holds the value of the "mtime" field.
	Mtime time.Time `json:"mtime,omitempty"`
	// Deleted holds the value of the "deleted" field.
	Deleted bool `json:"deleted,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	org_users    *string
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Org holds the value of the org edge.
	Org *Org `json:"org,omitempty"`
	// Groups holds the value of the groups edge.
	Groups []*Group `json:"groups,omitempty"`
	// Namespace holds the value of the namespace edge.
	Namespace []*Namespace `json:"namespace,omitempty"`
	// Credential holds the value of the credential edge.
	Credential *Credential `json:"credential,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// OrgOrErr returns the Org value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) OrgOrErr() (*Org, error) {
	if e.loadedTypes[0] {
		if e.Org == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: org.Label}
		}
		return e.Org, nil
	}
	return nil, &NotLoadedError{edge: "org"}
}

// GroupsOrErr returns the Groups value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) GroupsOrErr() ([]*Group, error) {
	if e.loadedTypes[1] {
		return e.Groups, nil
	}
	return nil, &NotLoadedError{edge: "groups"}
}

// NamespaceOrErr returns the Namespace value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) NamespaceOrErr() ([]*Namespace, error) {
	if e.loadedTypes[2] {
		return e.Namespace, nil
	}
	return nil, &NotLoadedError{edge: "namespace"}
}

// CredentialOrErr returns the Credential value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) CredentialOrErr() (*Credential, error) {
	if e.loadedTypes[3] {
		if e.Credential == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: credential.Label}
		}
		return e.Credential, nil
	}
	return nil, &NotLoadedError{edge: "credential"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldDisabled, user.FieldDeleted:
			values[i] = new(sql.NullBool)
		case user.FieldVer:
			values[i] = new(sql.NullInt64)
		case user.FieldID, user.FieldName, user.FieldEmail:
			values[i] = new(sql.NullString)
		case user.FieldCtime, user.FieldMtime:
			values[i] = new(sql.NullTime)
		case user.ForeignKeys[0]: // org_users
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				u.ID = value.String
			}
		case user.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldDisabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field disabled", values[i])
			} else if value.Valid {
				u.Disabled = value.Bool
			}
		case user.FieldVer:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ver", values[i])
			} else if value.Valid {
				u.Ver = int(value.Int64)
			}
		case user.FieldCtime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ctime", values[i])
			} else if value.Valid {
				u.Ctime = value.Time
			}
		case user.FieldMtime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field mtime", values[i])
			} else if value.Valid {
				u.Mtime = value.Time
			}
		case user.FieldDeleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				u.Deleted = value.Bool
			}
		case user.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field org_users", values[i])
			} else if value.Valid {
				u.org_users = new(string)
				*u.org_users = value.String
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryOrg queries the "org" edge of the User entity.
func (u *User) QueryOrg() *OrgQuery {
	return NewUserClient(u.config).QueryOrg(u)
}

// QueryGroups queries the "groups" edge of the User entity.
func (u *User) QueryGroups() *GroupQuery {
	return NewUserClient(u.config).QueryGroups(u)
}

// QueryNamespace queries the "namespace" edge of the User entity.
func (u *User) QueryNamespace() *NamespaceQuery {
	return NewUserClient(u.config).QueryNamespace(u)
}

// QueryCredential queries the "credential" edge of the User entity.
func (u *User) QueryCredential() *CredentialQuery {
	return NewUserClient(u.config).QueryCredential(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("name=")
	builder.WriteString(u.Name)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(u.Email)
	builder.WriteString(", ")
	builder.WriteString("disabled=")
	builder.WriteString(fmt.Sprintf("%v", u.Disabled))
	builder.WriteString(", ")
	builder.WriteString("ver=")
	builder.WriteString(fmt.Sprintf("%v", u.Ver))
	builder.WriteString(", ")
	builder.WriteString("ctime=")
	builder.WriteString(u.Ctime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("mtime=")
	builder.WriteString(u.Mtime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", u.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
