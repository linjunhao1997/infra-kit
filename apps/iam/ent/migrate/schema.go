// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AuthoritiesColumns holds the columns for the "authorities" table.
	AuthoritiesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "code", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "ctime", Type: field.TypeTime},
		{Name: "mtime", Type: field.TypeTime},
	}
	// AuthoritiesTable holds the schema information for the "authorities" table.
	AuthoritiesTable = &schema.Table{
		Name:       "authorities",
		Columns:    AuthoritiesColumns,
		PrimaryKey: []*schema.Column{AuthoritiesColumns[0]},
	}
	// CredentialsColumns holds the columns for the "credentials" table.
	CredentialsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "ak", Type: field.TypeString},
		{Name: "sk", Type: field.TypeString},
		{Name: "ctime", Type: field.TypeTime},
		{Name: "mtime", Type: field.TypeTime},
		{Name: "deleted", Type: field.TypeBool},
		{Name: "user_credential", Type: field.TypeString, Unique: true, Nullable: true},
	}
	// CredentialsTable holds the schema information for the "credentials" table.
	CredentialsTable = &schema.Table{
		Name:       "credentials",
		Columns:    CredentialsColumns,
		PrimaryKey: []*schema.Column{CredentialsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "credentials_users_credential",
				Columns:    []*schema.Column{CredentialsColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// GroupsColumns holds the columns for the "groups" table.
	GroupsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "code", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "ctime", Type: field.TypeTime},
		{Name: "mtime", Type: field.TypeTime},
		{Name: "deleted", Type: field.TypeBool},
		{Name: "org_groups", Type: field.TypeString, Nullable: true},
	}
	// GroupsTable holds the schema information for the "groups" table.
	GroupsTable = &schema.Table{
		Name:       "groups",
		Columns:    GroupsColumns,
		PrimaryKey: []*schema.Column{GroupsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "groups_orgs_groups",
				Columns:    []*schema.Column{GroupsColumns[7]},
				RefColumns: []*schema.Column{OrgsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// NamespacesColumns holds the columns for the "namespaces" table.
	NamespacesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "code", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "label", Type: field.TypeString},
		{Name: "ctime", Type: field.TypeTime},
		{Name: "mtime", Type: field.TypeTime},
		{Name: "deleted", Type: field.TypeBool},
		{Name: "org_namespaces", Type: field.TypeString, Nullable: true},
	}
	// NamespacesTable holds the schema information for the "namespaces" table.
	NamespacesTable = &schema.Table{
		Name:       "namespaces",
		Columns:    NamespacesColumns,
		PrimaryKey: []*schema.Column{NamespacesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "namespaces_orgs_namespaces",
				Columns:    []*schema.Column{NamespacesColumns[8]},
				RefColumns: []*schema.Column{OrgsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// OrgsColumns holds the columns for the "orgs" table.
	OrgsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "code", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "ctime", Type: field.TypeTime},
		{Name: "mtime", Type: field.TypeTime},
		{Name: "deleted", Type: field.TypeBool},
	}
	// OrgsTable holds the schema information for the "orgs" table.
	OrgsTable = &schema.Table{
		Name:       "orgs",
		Columns:    OrgsColumns,
		PrimaryKey: []*schema.Column{OrgsColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "email", Type: field.TypeString},
		{Name: "disabled", Type: field.TypeBool},
		{Name: "ver", Type: field.TypeInt},
		{Name: "ctime", Type: field.TypeTime},
		{Name: "mtime", Type: field.TypeTime},
		{Name: "deleted", Type: field.TypeBool},
		{Name: "org_users", Type: field.TypeString, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "users_orgs_users",
				Columns:    []*schema.Column{UsersColumns[8]},
				RefColumns: []*schema.Column{OrgsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// GroupUsersColumns holds the columns for the "group_users" table.
	GroupUsersColumns = []*schema.Column{
		{Name: "group_id", Type: field.TypeString},
		{Name: "user_id", Type: field.TypeString},
	}
	// GroupUsersTable holds the schema information for the "group_users" table.
	GroupUsersTable = &schema.Table{
		Name:       "group_users",
		Columns:    GroupUsersColumns,
		PrimaryKey: []*schema.Column{GroupUsersColumns[0], GroupUsersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "group_users_group_id",
				Columns:    []*schema.Column{GroupUsersColumns[0]},
				RefColumns: []*schema.Column{GroupsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "group_users_user_id",
				Columns:    []*schema.Column{GroupUsersColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// GroupAuthoritiesColumns holds the columns for the "group_authorities" table.
	GroupAuthoritiesColumns = []*schema.Column{
		{Name: "group_id", Type: field.TypeString},
		{Name: "authority_id", Type: field.TypeString},
	}
	// GroupAuthoritiesTable holds the schema information for the "group_authorities" table.
	GroupAuthoritiesTable = &schema.Table{
		Name:       "group_authorities",
		Columns:    GroupAuthoritiesColumns,
		PrimaryKey: []*schema.Column{GroupAuthoritiesColumns[0], GroupAuthoritiesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "group_authorities_group_id",
				Columns:    []*schema.Column{GroupAuthoritiesColumns[0]},
				RefColumns: []*schema.Column{GroupsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "group_authorities_authority_id",
				Columns:    []*schema.Column{GroupAuthoritiesColumns[1]},
				RefColumns: []*schema.Column{AuthoritiesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// NamespaceUsersColumns holds the columns for the "namespace_users" table.
	NamespaceUsersColumns = []*schema.Column{
		{Name: "namespace_id", Type: field.TypeString},
		{Name: "user_id", Type: field.TypeString},
	}
	// NamespaceUsersTable holds the schema information for the "namespace_users" table.
	NamespaceUsersTable = &schema.Table{
		Name:       "namespace_users",
		Columns:    NamespaceUsersColumns,
		PrimaryKey: []*schema.Column{NamespaceUsersColumns[0], NamespaceUsersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "namespace_users_namespace_id",
				Columns:    []*schema.Column{NamespaceUsersColumns[0]},
				RefColumns: []*schema.Column{NamespacesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "namespace_users_user_id",
				Columns:    []*schema.Column{NamespaceUsersColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AuthoritiesTable,
		CredentialsTable,
		GroupsTable,
		NamespacesTable,
		OrgsTable,
		UsersTable,
		GroupUsersTable,
		GroupAuthoritiesTable,
		NamespaceUsersTable,
	}
)

func init() {
	CredentialsTable.ForeignKeys[0].RefTable = UsersTable
	GroupsTable.ForeignKeys[0].RefTable = OrgsTable
	NamespacesTable.ForeignKeys[0].RefTable = OrgsTable
	UsersTable.ForeignKeys[0].RefTable = OrgsTable
	GroupUsersTable.ForeignKeys[0].RefTable = GroupsTable
	GroupUsersTable.ForeignKeys[1].RefTable = UsersTable
	GroupAuthoritiesTable.ForeignKeys[0].RefTable = GroupsTable
	GroupAuthoritiesTable.ForeignKeys[1].RefTable = AuthoritiesTable
	NamespaceUsersTable.ForeignKeys[0].RefTable = NamespacesTable
	NamespaceUsersTable.ForeignKeys[1].RefTable = UsersTable
}
