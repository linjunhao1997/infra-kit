// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"infra-kit/apps/iam/ent/authority"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Authority is the model entity for the Authority schema.
type Authority struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Ctime holds the value of the "ctime" field.
	Ctime time.Time `json:"ctime,omitempty"`
	// Mtime holds the value of the "mtime" field.
	Mtime time.Time `json:"mtime,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AuthorityQuery when eager-loading is set.
	Edges        AuthorityEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AuthorityEdges holds the relations/edges for other nodes in the graph.
type AuthorityEdges struct {
	// Groups holds the value of the groups edge.
	Groups []*Group `json:"groups,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// GroupsOrErr returns the Groups value or an error if the edge
// was not loaded in eager-loading.
func (e AuthorityEdges) GroupsOrErr() ([]*Group, error) {
	if e.loadedTypes[0] {
		return e.Groups, nil
	}
	return nil, &NotLoadedError{edge: "groups"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Authority) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case authority.FieldID, authority.FieldCode, authority.FieldName:
			values[i] = new(sql.NullString)
		case authority.FieldCtime, authority.FieldMtime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Authority fields.
func (a *Authority) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case authority.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				a.ID = value.String
			}
		case authority.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				a.Code = value.String
			}
		case authority.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case authority.FieldCtime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ctime", values[i])
			} else if value.Valid {
				a.Ctime = value.Time
			}
		case authority.FieldMtime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field mtime", values[i])
			} else if value.Valid {
				a.Mtime = value.Time
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Authority.
// This includes values selected through modifiers, order, etc.
func (a *Authority) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryGroups queries the "groups" edge of the Authority entity.
func (a *Authority) QueryGroups() *GroupQuery {
	return NewAuthorityClient(a.config).QueryGroups(a)
}

// Update returns a builder for updating this Authority.
// Note that you need to call Authority.Unwrap() before calling this method if this Authority
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Authority) Update() *AuthorityUpdateOne {
	return NewAuthorityClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Authority entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Authority) Unwrap() *Authority {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Authority is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Authority) String() string {
	var builder strings.Builder
	builder.WriteString("Authority(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("code=")
	builder.WriteString(a.Code)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(a.Name)
	builder.WriteString(", ")
	builder.WriteString("ctime=")
	builder.WriteString(a.Ctime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("mtime=")
	builder.WriteString(a.Mtime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Authorities is a parsable slice of Authority.
type Authorities []*Authority
