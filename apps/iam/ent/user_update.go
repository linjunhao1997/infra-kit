// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"infra-kit/apps/iam/ent/credential"
	"infra-kit/apps/iam/ent/group"
	"infra-kit/apps/iam/ent/namespace"
	"infra-kit/apps/iam/ent/org"
	"infra-kit/apps/iam/ent/predicate"
	"infra-kit/apps/iam/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetName sets the "name" field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetDisabled sets the "disabled" field.
func (uu *UserUpdate) SetDisabled(b bool) *UserUpdate {
	uu.mutation.SetDisabled(b)
	return uu
}

// SetVer sets the "ver" field.
func (uu *UserUpdate) SetVer(i int) *UserUpdate {
	uu.mutation.ResetVer()
	uu.mutation.SetVer(i)
	return uu
}

// AddVer adds i to the "ver" field.
func (uu *UserUpdate) AddVer(i int) *UserUpdate {
	uu.mutation.AddVer(i)
	return uu
}

// SetCtime sets the "ctime" field.
func (uu *UserUpdate) SetCtime(t time.Time) *UserUpdate {
	uu.mutation.SetCtime(t)
	return uu
}

// SetMtime sets the "mtime" field.
func (uu *UserUpdate) SetMtime(t time.Time) *UserUpdate {
	uu.mutation.SetMtime(t)
	return uu
}

// SetDeleted sets the "deleted" field.
func (uu *UserUpdate) SetDeleted(b bool) *UserUpdate {
	uu.mutation.SetDeleted(b)
	return uu
}

// SetOrgID sets the "org" edge to the Org entity by ID.
func (uu *UserUpdate) SetOrgID(id string) *UserUpdate {
	uu.mutation.SetOrgID(id)
	return uu
}

// SetNillableOrgID sets the "org" edge to the Org entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableOrgID(id *string) *UserUpdate {
	if id != nil {
		uu = uu.SetOrgID(*id)
	}
	return uu
}

// SetOrg sets the "org" edge to the Org entity.
func (uu *UserUpdate) SetOrg(o *Org) *UserUpdate {
	return uu.SetOrgID(o.ID)
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (uu *UserUpdate) AddGroupIDs(ids ...string) *UserUpdate {
	uu.mutation.AddGroupIDs(ids...)
	return uu
}

// AddGroups adds the "groups" edges to the Group entity.
func (uu *UserUpdate) AddGroups(g ...*Group) *UserUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.AddGroupIDs(ids...)
}

// AddNamespaceIDs adds the "namespace" edge to the Namespace entity by IDs.
func (uu *UserUpdate) AddNamespaceIDs(ids ...string) *UserUpdate {
	uu.mutation.AddNamespaceIDs(ids...)
	return uu
}

// AddNamespace adds the "namespace" edges to the Namespace entity.
func (uu *UserUpdate) AddNamespace(n ...*Namespace) *UserUpdate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uu.AddNamespaceIDs(ids...)
}

// SetCredentialID sets the "credential" edge to the Credential entity by ID.
func (uu *UserUpdate) SetCredentialID(id string) *UserUpdate {
	uu.mutation.SetCredentialID(id)
	return uu
}

// SetNillableCredentialID sets the "credential" edge to the Credential entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableCredentialID(id *string) *UserUpdate {
	if id != nil {
		uu = uu.SetCredentialID(*id)
	}
	return uu
}

// SetCredential sets the "credential" edge to the Credential entity.
func (uu *UserUpdate) SetCredential(c *Credential) *UserUpdate {
	return uu.SetCredentialID(c.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearOrg clears the "org" edge to the Org entity.
func (uu *UserUpdate) ClearOrg() *UserUpdate {
	uu.mutation.ClearOrg()
	return uu
}

// ClearGroups clears all "groups" edges to the Group entity.
func (uu *UserUpdate) ClearGroups() *UserUpdate {
	uu.mutation.ClearGroups()
	return uu
}

// RemoveGroupIDs removes the "groups" edge to Group entities by IDs.
func (uu *UserUpdate) RemoveGroupIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveGroupIDs(ids...)
	return uu
}

// RemoveGroups removes "groups" edges to Group entities.
func (uu *UserUpdate) RemoveGroups(g ...*Group) *UserUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.RemoveGroupIDs(ids...)
}

// ClearNamespace clears all "namespace" edges to the Namespace entity.
func (uu *UserUpdate) ClearNamespace() *UserUpdate {
	uu.mutation.ClearNamespace()
	return uu
}

// RemoveNamespaceIDs removes the "namespace" edge to Namespace entities by IDs.
func (uu *UserUpdate) RemoveNamespaceIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveNamespaceIDs(ids...)
	return uu
}

// RemoveNamespace removes "namespace" edges to Namespace entities.
func (uu *UserUpdate) RemoveNamespace(n ...*Namespace) *UserUpdate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uu.RemoveNamespaceIDs(ids...)
}

// ClearCredential clears the "credential" edge to the Credential entity.
func (uu *UserUpdate) ClearCredential() *UserUpdate {
	uu.mutation.ClearCredential()
	return uu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.Disabled(); ok {
		_spec.SetField(user.FieldDisabled, field.TypeBool, value)
	}
	if value, ok := uu.mutation.Ver(); ok {
		_spec.SetField(user.FieldVer, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedVer(); ok {
		_spec.AddField(user.FieldVer, field.TypeInt, value)
	}
	if value, ok := uu.mutation.Ctime(); ok {
		_spec.SetField(user.FieldCtime, field.TypeTime, value)
	}
	if value, ok := uu.mutation.Mtime(); ok {
		_spec.SetField(user.FieldMtime, field.TypeTime, value)
	}
	if value, ok := uu.mutation.Deleted(); ok {
		_spec.SetField(user.FieldDeleted, field.TypeBool, value)
	}
	if uu.mutation.OrgCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.OrgTable,
			Columns: []string{user.OrgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(org.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.OrgIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.OrgTable,
			Columns: []string{user.OrgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(org.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.GroupsTable,
			Columns: user.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !uu.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.GroupsTable,
			Columns: user.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.GroupsTable,
			Columns: user.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.NamespaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.NamespaceTable,
			Columns: user.NamespacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(namespace.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedNamespaceIDs(); len(nodes) > 0 && !uu.mutation.NamespaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.NamespaceTable,
			Columns: user.NamespacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(namespace.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.NamespaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.NamespaceTable,
			Columns: user.NamespacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(namespace.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CredentialCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.CredentialTable,
			Columns: []string{user.CredentialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(credential.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CredentialIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.CredentialTable,
			Columns: []string{user.CredentialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(credential.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetName sets the "name" field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetDisabled sets the "disabled" field.
func (uuo *UserUpdateOne) SetDisabled(b bool) *UserUpdateOne {
	uuo.mutation.SetDisabled(b)
	return uuo
}

// SetVer sets the "ver" field.
func (uuo *UserUpdateOne) SetVer(i int) *UserUpdateOne {
	uuo.mutation.ResetVer()
	uuo.mutation.SetVer(i)
	return uuo
}

// AddVer adds i to the "ver" field.
func (uuo *UserUpdateOne) AddVer(i int) *UserUpdateOne {
	uuo.mutation.AddVer(i)
	return uuo
}

// SetCtime sets the "ctime" field.
func (uuo *UserUpdateOne) SetCtime(t time.Time) *UserUpdateOne {
	uuo.mutation.SetCtime(t)
	return uuo
}

// SetMtime sets the "mtime" field.
func (uuo *UserUpdateOne) SetMtime(t time.Time) *UserUpdateOne {
	uuo.mutation.SetMtime(t)
	return uuo
}

// SetDeleted sets the "deleted" field.
func (uuo *UserUpdateOne) SetDeleted(b bool) *UserUpdateOne {
	uuo.mutation.SetDeleted(b)
	return uuo
}

// SetOrgID sets the "org" edge to the Org entity by ID.
func (uuo *UserUpdateOne) SetOrgID(id string) *UserUpdateOne {
	uuo.mutation.SetOrgID(id)
	return uuo
}

// SetNillableOrgID sets the "org" edge to the Org entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableOrgID(id *string) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetOrgID(*id)
	}
	return uuo
}

// SetOrg sets the "org" edge to the Org entity.
func (uuo *UserUpdateOne) SetOrg(o *Org) *UserUpdateOne {
	return uuo.SetOrgID(o.ID)
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (uuo *UserUpdateOne) AddGroupIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddGroupIDs(ids...)
	return uuo
}

// AddGroups adds the "groups" edges to the Group entity.
func (uuo *UserUpdateOne) AddGroups(g ...*Group) *UserUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.AddGroupIDs(ids...)
}

// AddNamespaceIDs adds the "namespace" edge to the Namespace entity by IDs.
func (uuo *UserUpdateOne) AddNamespaceIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddNamespaceIDs(ids...)
	return uuo
}

// AddNamespace adds the "namespace" edges to the Namespace entity.
func (uuo *UserUpdateOne) AddNamespace(n ...*Namespace) *UserUpdateOne {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uuo.AddNamespaceIDs(ids...)
}

// SetCredentialID sets the "credential" edge to the Credential entity by ID.
func (uuo *UserUpdateOne) SetCredentialID(id string) *UserUpdateOne {
	uuo.mutation.SetCredentialID(id)
	return uuo
}

// SetNillableCredentialID sets the "credential" edge to the Credential entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCredentialID(id *string) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetCredentialID(*id)
	}
	return uuo
}

// SetCredential sets the "credential" edge to the Credential entity.
func (uuo *UserUpdateOne) SetCredential(c *Credential) *UserUpdateOne {
	return uuo.SetCredentialID(c.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearOrg clears the "org" edge to the Org entity.
func (uuo *UserUpdateOne) ClearOrg() *UserUpdateOne {
	uuo.mutation.ClearOrg()
	return uuo
}

// ClearGroups clears all "groups" edges to the Group entity.
func (uuo *UserUpdateOne) ClearGroups() *UserUpdateOne {
	uuo.mutation.ClearGroups()
	return uuo
}

// RemoveGroupIDs removes the "groups" edge to Group entities by IDs.
func (uuo *UserUpdateOne) RemoveGroupIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveGroupIDs(ids...)
	return uuo
}

// RemoveGroups removes "groups" edges to Group entities.
func (uuo *UserUpdateOne) RemoveGroups(g ...*Group) *UserUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.RemoveGroupIDs(ids...)
}

// ClearNamespace clears all "namespace" edges to the Namespace entity.
func (uuo *UserUpdateOne) ClearNamespace() *UserUpdateOne {
	uuo.mutation.ClearNamespace()
	return uuo
}

// RemoveNamespaceIDs removes the "namespace" edge to Namespace entities by IDs.
func (uuo *UserUpdateOne) RemoveNamespaceIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveNamespaceIDs(ids...)
	return uuo
}

// RemoveNamespace removes "namespace" edges to Namespace entities.
func (uuo *UserUpdateOne) RemoveNamespace(n ...*Namespace) *UserUpdateOne {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uuo.RemoveNamespaceIDs(ids...)
}

// ClearCredential clears the "credential" edge to the Credential entity.
func (uuo *UserUpdateOne) ClearCredential() *UserUpdateOne {
	uuo.mutation.ClearCredential()
	return uuo
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Disabled(); ok {
		_spec.SetField(user.FieldDisabled, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.Ver(); ok {
		_spec.SetField(user.FieldVer, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedVer(); ok {
		_spec.AddField(user.FieldVer, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.Ctime(); ok {
		_spec.SetField(user.FieldCtime, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.Mtime(); ok {
		_spec.SetField(user.FieldMtime, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.Deleted(); ok {
		_spec.SetField(user.FieldDeleted, field.TypeBool, value)
	}
	if uuo.mutation.OrgCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.OrgTable,
			Columns: []string{user.OrgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(org.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.OrgIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.OrgTable,
			Columns: []string{user.OrgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(org.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.GroupsTable,
			Columns: user.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !uuo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.GroupsTable,
			Columns: user.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.GroupsTable,
			Columns: user.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.NamespaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.NamespaceTable,
			Columns: user.NamespacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(namespace.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedNamespaceIDs(); len(nodes) > 0 && !uuo.mutation.NamespaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.NamespaceTable,
			Columns: user.NamespacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(namespace.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.NamespaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.NamespaceTable,
			Columns: user.NamespacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(namespace.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CredentialCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.CredentialTable,
			Columns: []string{user.CredentialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(credential.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CredentialIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.CredentialTable,
			Columns: []string{user.CredentialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(credential.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
